---

title: Recommendations for DNSSEC Resolvers Operators
abbrev: DRO Recommendations
docname: draft-ietf-dnsop-dnssec-validator-requirements-04
submissionType: IETF

ipr: trust200902
area: operational
wg: dnsop
kw: Internet-Draft
cat: info

pi:
  rfcedstyle: yes
  toc: yes
  tocindent: yes
  sortrefs: yes
  symrefs: yes
  strict: yes
  comments: yes
  inline: yes
  docmapping: yes

author:
      -
        ins: D. Migault
        name: Daniel Migault
        org: Ericsson
        street: 8275 Trans Canada Route
        city: Saint Laurent, QC
        code: 4S 0B6
        country: Canada
        email: daniel.migault@ericsson.com
      -
        ins: E. Lewis
        name: Edward Lewis
        org: ICANN
        street:
        -
        city:
        -
        code:
        -
        country: USA
        email: edward.lewis@icann.org
      -
        ins: D. York
        name: Dan York
        org: Internet Society
        street:
        -
        city:
        -
        code:
        -
        country: USA
        email: york@isoc.org

informative:
  UNBOUND-ANCHOR:
    author:
    target: https://nlnetlabs.nl/documentation/unbound/unbound-anchor/
    title: unbound-anchor - Unbound anchor utility
  ENT:
    author:
      name: Vincent Levigneron
    target: https://indico.dns-oarc.net/event/25/contributions/403/attachments/378/647/AFNIC_OARC_Dallas.pdf
    title: ENT was here !!!
  ta-fetcher:
    author: 
      name: Jakob Schlyter and Kim Davies
    target: https://github.com/iana-org/get-trust-anchor
    title: DNSSEC Trust Anchor Fetcher
      





--- abstract

The DNS Security Extensions (DNSSEC) define a process for validating received
data and assert them authentic and complete as opposed to
forged.

This document clarifies the scope and responsibilities of
DNSSEC Resolver Operators (DRO) as well as operational recommendations
that DNSSEC validators operators SHOULD put in place in order to
implement sufficient trust that makes DNSSEC validation output accurate.
The recommendations described in this document include, provisioning
mechanisms as well as monitoring and management mechanisms.

--- middle




# Introduction {#sec-intro}

A DNS resolver is service that locates and returns information pertaining to a query issued by some other service, such as an application.  By its nature, a DNS resolver is inquisitive, susceptible to misleading information it may receive.
To address this, DNS Security (DNSSEC) extensions were defined to provide authenticity and integrity to responses, as well as to provide an authenticated notice for data that does not exist.

A DNS resolver operator is an organization or individual that runs a DNS resolver.  The resolver may be for a small set of relying parties, for a large but bounded collection of customers, or it may be operated with no restriction on who or what may make use of it.
To enhance the value of the service, a DNS resolver operator implements various security controls, include the use of DNSSEC validation.  For the sake of this document, the term DNSSEC Resolver Operator (DRO) is defined as the responsible operator of a DNS resolver that makes use of DNSSEC validation.

Operating DNSSEC validation involves making use of digital signatures generated by a DNSSEC signer.
Besides the simple cryptographic process of validating digital signatures there are a number of checks required due to the nature of the DNS protocol.
A well-written DNSSEC validating resolver will faithfully implement the DNSSEC processes needed, leaving an operator to manage a few items.

The items that a DRO needs to attend to are:

* Time of day (current, wall-clock time)
* Trust anchors (positive and negative)
* Monitoring of the service, including abuse

This document will list recommended actions for DNSSEC validating resolver operators that will help achieve the goals of DNSSEC validation.  First, the goals ought to be stated.

The primary goal of any operations endeavor is to provide a service within service level agreements intended to make relying parties happy with the performance of the service.  For DNSSEC, this breaks into two parts, one of accurately achieving the protections offered by DNSSEC, the other, to avoid DNSSEC from accidentally being an impediment.

The recommendations will focus on preparation of the elements of a DNSSEC validating resolver, as described earlier in the diagram.  In particular, there are recommendations related to Service Monitoring, Time Source, Cryptographic Libraries, Trust Anchor Manager/Store, and DNS Resolver.  The recommendations are categorized as at initialization, during runtime, and upon demand.
 
# Requirements Notation

{::boilerplate bcp14}

# Terminology

This document uses the following terminology:

DNSSEC validator:
: the entity that performs DNS resolution and performs signature
validation.

Accurate validation:
: validation that avoids false positives and catches true negatives.

Trust Anchor Data Store:
: a module (of code) implementing functions related to the trust anchors
used by the validator.  This is essentially a database allowing access,
monitoring of, and changes to trust anchors.

DNSSEC Resolver Operator (DRO):
: The operator providing DNSSEC validation service and managing DNSSEC
validators

#  Overall View of DNSSEC Validating Resolver {#sec-dnssec-val-desc}

To help orient this document, the following schematic is offered to show some of the interrelationships among the elements of a DNSSEC validating resolver.  This drawing is merely a cartoon summary, not an implementation guide.

~~~ aaasvg

  +--------------+  +------------+ +---------------+ +--------------+
  |              |  |            | |               | |              |
  |   Service    |  |    Time    | | Cryptographic | | Trust Anchor |
  |   Monitoring |  |    Source  | |   Libraries   | | Manager/Store|
  |              |  |            | |               | |              |
  +--------------+  +------------+ +---------------+ +--------------+
          |                |               |              ^    ^
          v                v               v              |    |
  +--------------+  +------------------------------+      |    |
  |              |  |                              |      |    |
  |              |  |                              |      |    |
->| DNS Resolver |->|   DNSSEC Validation Engine   |<-----+    |
-<|              |<-|                              |           |
  |              |  |                              |           |
  +--------------+  +------------------------------+           |
          ^               ^ |             ^                    |
          |               | v             |                    |
          |         +------------+ +---------------+           |
          |         |            | |               |           |
          +---------| DNS Caches | | DNS Messages  |<----------+
                    |            | |               |
                    +------------+ +---------------+
~~~
{: title="DNSSEC Validating Resolver Description" }

Across the top row are elements that an operator needs to address to properly run a DNSSEC Validating Resolver.

Service Monitoring:
: Enforces acceptable use policy and enables management of the service
This is a generic module for all services, here featuring some DNS and DNSSEC specific concerns.
 
Time Source:
: Provides the wall clock or absolute, time
DNS has always used relative time to manage the TTL of resource record sets in caches, DNSSEC introduced the need for absolute time to thwart replay attacks and to manage the lifetime of signatures.

Cryptographic Libraries:
: Software library or a Hardware Security Module (HSM) implementing cryptography providing Due to the nature of cryptography, the implementation of this module may evolve over time or at least be subject to technical refresh.

Trust Anchor Manager/Store:
: The database of trust anchors used as the basis from which DNSSEC operates
This module contains the foundation upon which DNSSEC evaluates received data sets.  The contents of this module are essential for proper operation.  For a general-purpose validator running on a public Internet, it may have a single entry, for the very top of the DNS name space (the root).  Management of this may be left to automated processes that are carefully designed to address vulnerabilities related to automated trust management.  For specific situations, the Trust Anchor Manager/Store will also manage local-policy supporting trust anchors as well.  Careful operation of this module is crucial to the value of the DNSSEC validating resolver.


The other modules fill out the diagram to give the above context:

DNS Resolver:
: The service interface offered to other services/applications/users
This is the generic DNS resolution service, consulting the cache for hits, and seeking new answers for misses.

DNSSEC Validation Engine:
: This implements the DNSSEC validation process
The validation engine is assume to faithfully implement the DNSSEC validation algorithm, relying on the information from the Time Source, Cryptographic Libraries, Trust Anchor Management/Store as well as what is held in the local cache or gained through messages.

DNS Caches:
: Include positive and negative caches.
These are the ordinary caches used in DNS operations, including DNSSEC extended record types and management.

DNS Messages:
: Existing DNS message passing
This covers the proper implementation and operation of DNS and DNSSEC message exchanges.

Note that there may be other elements involved in a DNSSEC validating resolver.
 
#  Time deviation and absence of Real Time Clock Recommendations

As DNSSEC uses wall-clock time to temporally limit the validity of RRSIG resource records, a DNSSEC validator needs a reliable time source.  If a validator can be fooled into believing that the time is a point well into the past, an incorrect RRSIG resource record may be replayed and used, or an old key whose private component has since been exposed may be able to forge a falsified answer.

The range of these recommendations include devices that do not have an embedded Real Time Clock.  Such devices need to have their system clocks updated upon power up before starting the DNSSEC validator.

At initialization: a DNSSEC validator needs to be able to establish reliable time without relying on DNSSEC validation.  The latter clause is needed as the initialization step is being carried out to start DNSSEC validation, it is not assumed to be up and running at this point.  One way to interpret this is that a time source (Network Time Protocol) ought to be identified by a numerical IP address and not a fully qualified domain name (which would require a DNS lookup).

During runtime: a DNSSEC validator operator ought to have controls in place to monitor the current time of a validator as well as monitor the number of validation failures that can be attributed to temporal violations.  Updates to the current time ought to make use of secure environments, whether secure channels for NTP or as appropriate for the installation.  Updates ought to be part of an automated process, running at appropriately frequent intervals.

Upon demand: a DNSSEC validator operator ought to be able to perform any of the runtime actions upon demand, for instance, to help diagnosis a service failure.


# Trust Anchor Related Recommendations {#ta}

The TA store is seen as an instantiation of a trust model put in place by the DRO. 
The default trust model remains rooted in the root zone as a security entry point, and no zones being considered as unsecured.
A DRO may consider one or multiple additional security entry points, for example, when the secure delegation to these RRsets may not be validated for any reasons.
The trust model MUST at least ensure that any domain name in the DNS be covered by at least one TA.
As the number of top level domains is evolving overtime, it remains safe to keep the root zone as a security entry point in order to cover the full domain name space.
Upon considering security entry points, the DRO should carefully ensure the TA have a bootstrapping mechanism (see the at initialization paragraph) as well as have their signers committed to respect the {{!RFC5011}} timing to enable automatic updates (see the runtime paragraph below).
 
The Trust Anchor store contains positive TAs and negative TAs .
Positive TAs are  usually represented by a DNSKEY resource record or a DS resource record and are involved in the signature validation process to determine whether the validation is successful or not.
Negative TA are usually represented as a FQDN and indicates the signature validation process should not be performed.
This section is focused on positive TA while negative TA are discussed in {{nta}}.
   
At initialization: The DRO needs to ensure the resolver can only be started with a TA store that matches the trust model and that is up-to-date.
The DRO needs to securely retrieve the TA and implement some checks over the TA upon starting the resolver. 
{{?RFC7958}} describes a mechanism to retrieve securely the root zone trust anchor implemented for example by {{UNBOUND-ANCHOR}} or {{ta-fetcher}}.
In addition {{UNBOUND-ANCHOR}} implements some checks to validate the configured TA is valid.
With the use of {{UNBOUND-ANCHOR}}, the DRO relies on the software vendor to retrieve the TA store for the trust model with the root zone TA as a single entry point and performs the appropriated checks. 
While {{?RFC7958}} only applies to the root zone TA, the DRO should only rely on TA for which similar mechanisms have been defined an implemented by the different resolver's implementations. 

During runtime: The DRO needs to ensure TA updates appropriately is is achieved by enabling TA to be updated automatically as well as being able to check the TA status.
Which TA health check are expected to be performed regularly, this is typically being performed on demand. 
TA updates are not expected to be handled manually as this introduces a potentially huge vector for configuration errors as well as potential misunderstanding of ongoing operations.
Instead DRO should rely on "Automated Updates to DNSSEC Trust Anchors" {{!RFC5011}} {{?I-D.ietf-dnsop-rfc5011-security-considerations}}.
As {{!RFC5011}} is an in band mechanism, the DRO is expected to understand these risks {{!RFC5011, Section 8}} and be able to XXXX. 
 
Upon demand: The DRO should regularly check the status of the TA within its resolvers. This includes the TA stored in the running resolver as well as potential configuration files.
The TA used by the resolver is expected to be retrieved using "Signaling Trust Anchor Knowledge in DNS Security Extensions (DNSSEC)" {{!RFC8145}}, and may re-use similar software as those used at the initialisation to retrieve and check the TA.
The TA health check should be able to associate a status as defined in Section 3 of {{!RFC7583}} to ease the TA monitoring and potential analysis.
When an unexpected (old) TA is found, the health check should evaluate if the mismatch resulted from an ongoing normal roll over, a potential emergency key roll over, failed roll over or any other envisioned cases. 
In any case restarting the resolver is expected to address any situation that cannot be addressed otherwise, which reinforce the recommendation to rely on TA bootstrapping mechanisms.

Note also that {{!RFC8145}} also enable any authoritative server to check how the TA roll over is performed. Such cooperation is expected to be useful and benefit the overall operation of the DNS system.   


# Negative Trust Anchors Related Recommendations {#nta}

When the DNSSEC Resolver is not able to validate signatures because a key or DS has been published with an error, the DNSSEC Operator MAY temporarily disable the signature check for that key until the time the error is addressed.
Negative Trust Anchor (NTA)  represents the only permitted intervention in the resolving process for a DRO.

The designation of NTA might be misleading, but NTA are not expected to be part of the trust model even though the NTA belongs to the TA store. 


At initialization: Similarly to TA, the DRO is expected to automatically configure TA store with NTA

Upon demand: the DRO is expect to automatically determine the used NTA and handle NTA as described in {{!RFC7646}}.  

A signature validation failure is either an attack or a failure in the signing operation on the authoritative servers.
The DRO is expected to confirm this off line before introducing the NTA.
This is likely to happen via a human confirmation which is based on information collected during running time.  

At running time: The DRO should monitor the number of signature failure associated to each DNSKEY.
These number are only hints and MUST NOT trigger automated insertion of NTA.

#  ZSK / KSK (non TA) Related Recommendations

KSK / ZSK are not part of the DNSSEC validator configuration.
Their values in the DNS Caches may not reflect those published by the authoritative servers or may be incoherent with the RRset in the DNS Cache they are validating.
However, such incoherence primary results from error in the management of the authoritative servers.
As a result, it is not expected that the DNSSEC validator provides complex management facilities to address these issues as this will modify the DNS architecture and add complexity that is not proved to be beneficial.
As a result, recommendations always belong to the run time or on demand recommendations.
The main difference between TA and KSK/ZSK is that the DRO does not necessarily have an out of band mechanism to retrieve the RRsets.
As a result, the DRO has less information to determine and confirm what is happening.
The default recommendation is to let things go.

A number of reasons may result in inconsistencies between the RRsets stored in the cache and those published by the authoritative server.

An emergency KSK / ZSK rollover may result in a new KSK / ZSK with associated new RRSIG published in the authoritative zone, while DNSSEC validator may still cache the old value of the ZSK / KSK.
For a RRset not cached, the DNSSEC validator performs a DNSSEC query to the authoritative server that returns the RRset signed with the new KSK / ZSK.
The DNSSEC validator may not be able to retrieve the new KSK / ZSK while being unable to validate the signature with the old KSK / ZSK.
This either results in a bogus resolution or in an invalid signature check.
Note that by comparing the Key Tag Fields, the DNSSEC validator is able to notice the new KSK / ZSK used for signing differs from the one used to generate the received generated signature.
However, the DNSSEC validator is not expected to retrieve the new ZSK / KSK, as such behavior could be used by an attacker.
Instead, ZSK / KSK key roll over procedures are expected to avoid such inconsistencies.

Similarly, a KSK / ZSK roll over may be performed normally, that is as described in {{!RFC6781}} and {{!RFC7583}}.
While the KSK / ZSK roll over is performed, there is no obligation to flush the RRsets in the cache that have been associated with the old key.
In fact, these RRsets may still be considered as trusted and be removed from the cache as their TTL timeout.
With very long TTL, these RRsets may remain in the cache while the ZSK / KSK with a shorter TTL is no longer published nor in the cache.
In such situations, the purpose of the KSK / ZSK used to validate the data is considered trusted at the time it enters the cache, and such trust may remain after the KSK / ZSK is being rolled over.
Note also that even though the data may not be associated to the KSK / ZSK that has been used to validate the data, the link between the KSK / ZSK and the data is still stored in the cache using the RRSIG.
Note also that inconsistencies between the ZSK / KSK stored in the cache and those published on the authoritative server, may lead to inconsistencies to downstream DNSSEC validators that rely on multiple cache over time.

Typically, a request for the KSK / ZSK may have been provided by a cache that is storing the new published value, while the data and associated signatures may be associated to the old KSK / ZSK.

Incoherence between RRsets and DNSKEYs is not the responsibility of the DRO.
Instead, it is the responsibility of authoritative server publishing these data.
This includes insuring the coherence between TTLs and signature validation periods as well as small variations of the resolvers clocks.
Section 4.4.1 of {{!RFC6781}} provides some recommendations that can be implemented by the authoritative server which puts the responsibility of failure of signature validation under the responsibility of the authoritative server.
A DRO MAY however limit the risks for these inconsistencies to happen by configuring the DNSSEC validator with generic rules that applies to the validation process.
Typically, the TTL associate to the DNSKEY is an engagement from the authoritative server that the DNSKEY will remain valid over this period.
As this engagement supersedes the validation of any RRSIG and by extension to any RRset in the zone, this TTL value may be used as the maximum value for the TTL associated to FQDNs in the zone.
Section 8.1 of {{!RFC4033}} mention the ability by the resolver to set the upper bound of the TTL to the remaining signature validity period.
In addition, the DNSSEC validator should also be able to provide a maximum values for TTLs.
These values MAY also consider the small inaccuracy of the local clock.

RUNTIME:

* To limit the risks of incoherent data in the cache, it is RECOMMENDED DRO enforce TTL policies of RRsets based on the TTL of the DS, KSK and ZSK.
RRsets TTL SHOULD NOT exceed the DS, KSK or ZSK initial TTL value, that TTL SHOULD trigger delegation revalidation as described in {{!I-D.ietf-dnsop-ns-revalidation}}.
TTL SHOULD NOT exceed the signature validity.


# DNSKEY Related Recommendations

This section considers the recommendations that are common to TA as well
as non TA DNSKEY RRsets.

## Automated Reporting {#automated-reporting}

A DRO MAY regularly report the Trust Anchor used to the authoritative server.
This would at least provide insight to the authoritative server and provide some context before moving a key roll over further.

The purpose of reporting the currently used Trust Anchor for a domain name is to establish an informational channel between the resolver and the authoritative server.
This data may not directly be useful for the DNSSEC Resolver, but instead to the authoritative server.
In return it is likely the authoritative server will take the appropriate steps in operating the authoritative server and consider this information.
This results in the following recommendation:

RUNNING:

* A DRO SHOULD enable TA reporting to the authoritative server as specified in "Signaling Trust Anchor Knowledge in DNS Security Extensions (DNSSEC)" {{!RFC8145}}

## Interactions with the cached RRsets

The purpose of automated checks is to enable early detection of failed operations, which provides enough time to the DRO to react without any consequences.
On the other hand, these checks MAY reveal as well that a rogue TA has been placed and that the resolver is corrupted.
Similarly, a DRO may be informed by other channel a rogue or unwilling DNSKEY has been emitted.

In such situation, the DRO SHOULD be able to remove the RRsets validated by the rogue DNSKEY.

ONDEMAND:

* A DRO MUST be able to flush the cached data subtree associated to a DNSKEY



# Cryptography Deprecation Recommendations

As mentioned in {{!RFC8247}} and {{!RFC8221}} cryptography used one day is expected over the time to be replaced by new and more robust cryptographic mechanisms.
In the case of DNSSEC signature protocols are likely to be updated over time.
In order to anticipate the sunset of one of the signature scheme, a DNSSEC validator may be willing to estimate the impact of deprecating one signature scheme.

Currently, interoperability and security are enforced via cryptographic recommendations {{!RFC8624}} that are followed by both resolvers and authoritative servers.
The implementation of such guidance is ensured by the software vendors and the compliance of their releases.

To safely deprecate one signature scheme, the DNSSEC validator operator is expected to follow the recommendation below:

STARTUP:
* DRO MUST ensure recent software releases that comply with the most recent cryptographic guidances are being used

RUNTIME:

* A DRO SHOULD regularly request and monitor the signature scheme supported by  an authoritative server.
* A DRO SHOULD report a "Unsupported DNSKEY Algorithm" as defined in {{!RFC8914}}  when a deprecated algorithm is used for validation.

One inconvenient to such strategy i sthat it does not let one DRO to take advantage of more recent cryptographic.
While currently not being widely used, a DRO MAY share information with authoritative server in the hope that future deployment of authoritative servers will be able to leverage it.
{{!RFC6975}} provides the ability for a DNSSEC validator to announce an authoritative server the supported signature schemes.
However, a DNSSEC validator is not able to determine other than by requesting and monitoring DNSKEY RRsets as well as RRSIG.
These RRsets are received by enabling DNSSEC validation by default which is obviously the case for DNSSEC validator.

#  Invalid Reporting Recommendations

A DNSSEC validator receiving a DNS response cannot make the difference between receiving an non-secure response versus an attack.
Dropping DNSSEC fields by a misconfigured middle boxes, such as DS, RRRSIG is considered as an attack.
A DNSSEC validator is expected to perform secure DNS resolution and as such protects its stub client.
An invalid response may be the result of an attack or a misconfiguration, and the DNSSEC validator may play an important role in sharing this information with the authoritative server or domain name owner.

RUNTIME:

* DRO SHOULD monitor and report DNSSEC validation error.
Reporting may take various means but the DRO SHOULD implement {{!RFC8914}} to inform the DNS client.

# Transport Recommendations

DNSSEC validation requires that the validator is able to reliably obtain necessary records, especially DNSKEY records. This should be done at initial configuration, and tested periodically.

This means the validator MUST ensure it is configured so that the UDP and TCP transports, and DNS resolver components, are compatible with the network paths that the majority of DNS queries traverse - which includes compatibility between DNS and transport parameters with the Maximum Transmission Unit  (MTU).


In other words, make sure that:
1. DNS UDP bufsize (EDNS parameter) is set to a value compatible with network MTUs the queries and responses will encounter. If the validator advertises a bufsize >> MTU, responses with the IPv4  Don't Fragment (DF) bit set whose size R where MTU < R <= bufsize  exceeds the MTU will be dropped by the router with MTU < R.

2. The validator's OS TCP configuration has its advertised Maximum Segment Size (MSS) set to a value compatible with network MTUs the queries and responses will encounter.
  * Having an advertised MSS set to a value < MTU ensures that Path MTU Discovery is not required
  * If PMTUD fails for any reason, or if the server responding does not maintain or use PMTUD, and advertised MSS > MTU at any point in the path, TCP may encounter problems caused by IP fragmentation and reassembly.
  * This is particularly relevant if there are any NAT type devices in the path, as those may not properly handle fragmentation and reassembly
  * If all TCP segments are smaller than the path MTU, TCP will work reliably.

The avoidance of fragmentation in order to address known fragmentation-related security issues with DNS (leading to cache poisoning, for example) has resulted in the need to set the DF bit on UDP.
Validators will need to ensure their local environment can reliably get any critical DNSSEC records (notably DNSKEY) over UDP, or reliably get responses with TC=1 if overly large responses cannot be sent over UDP due to answers not fitting within the advertised bufsize payload.
Validators also need to ensure TCP works if it is needed, for the same situations.


STARTUP:
* DRO MUST ensure UDP and TCP transport are enabled.
* DRO MUST ensure DNS and TCP parameters will not exceed the expected MTU


RUNTIME:
* DRO SHOULD regularly discover MTU and ensure the DNS and TCP parameters are aligned wit this value.
* DRO SHOULD closely monitor the absence of responses, or ICMP PTB message as a potential incompatibility between configured parameters and the MTU.


#  IANA Considerations

There are no IANA consideration for this document.

#  Security Considerations

The recommendations listed in this document have two goals.
First ensuring the DNSSEC validator has appropriated information to appropriately perform DNSSEC validation.
Second, monitoring the necessary elements that would enable a DNSSEC validator operator to ease a potential analysis.
The recommendations provide very limited ability for a DNSSEC validator operator to alter or directly interfere on the validation process and the main purpose in providing the recommendations was to let the protocol run as much as possible.
Providing inappropriate information can lead to misconfiguring the DNSSEC validator, and thus disrupting the DNSSEC resolution service.
As a result, enabling the setting of configuration parameters by a third party may open a wide surface of attacks.
In addition, such changes may lead to unexpected corner cases that would result in making analysis and trouble shooting very hard.

As an appropriate time value is necessary to perform signature check, an attacker may provide rogue time value to prevent the DNSSEC validator to check signatures.

An attacker may also affect the resolution service by regularly asking the DNSSEC validator to flush the KSK/ZSK from its cache.
All associated data will also be flushed.
This generates additional DNSSEC resolution and additional validations, as RRSet that were cached require a DNSSEC resolution over the Internet.
This affects the resolution service by slowing down responses, and increases the load on the DNSSEC validator.

An attacker may ask the DNSSEC validator to consider a rogue KSK/ZSK, thus hijacking the DNS zone. Similarly, an attacker may inform the DNSSEC validator not to trust a given KSK in order to prevent DNSSEC validation to be performed.

An attacker (cf.  Section 7) can advertise a "known insecure" KSK or ZSK is "back to secure" to prevent signature check to be performed correctly.

As a result, information considered by the DNSSEC validator should be from a trusted party.  This trust party should have been authenticated, and the channel used to exchange the information should also be protected and authenticated.


The software used for DNSSEC validator is not immune to bugs and may become vulnerable independently of how it is operated.
As a result a DRO SHOULD NOT depend on a single implementation or version of a given software and SHOULD instead run at least two independent pieces of software.

# Acknowledgment

The need to address DNSSEC issues on the resolver occured during multiple discussions   including among others Ted Lemon, Ralph Weber,
Normen Kowalewski, Mikael Abrahamsson, Jim Gettys, Paul Wouters, Joe Abley, Michael Richardson, Vladimír Čunát, James Gannon, Andrew McConachie, Peter Thomassen, Florian Obser and Brian Dickson.

We also appreciated the support of the DNSOP chairs Tim Wicinski, Suzanne Woolf and Benno Overeinder.

